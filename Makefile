# Makefile for the Gandalf Trust Framework

# Ensure that PROMPT is set, but allow it to be overridden from the command line
PROMPT ?= "a simple CLI tool that takes a name and prints a greeting"
AUDIT_APP_NAME ?= app

# Default target
.PHONY: default
default: develop

# Target to install dependencies using uv and the lockfile
.PHONY: install
install:
	@echo "--- Ensuring virtual environment exists and installing dependencies ---"
	@if [ ! -d ".venv" ]; then \
		echo "Creating virtual environment using uv..."; \
		uv venv; \
	fi
	# Ensure Python executable is specified for uv pip sync
	uv pip sync requirements.txt --python .venv/bin/python
	@echo "✅ Virtual environment ready and dependencies installed."

# Target to compile requirements.in to requirements.txt (lock the dependencies)
.PHONY: lock
lock:
	@echo "--- Compiling requirements.in to requirements.txt using uv ---"
	uv pip compile requirements.in -o requirements.txt
	@echo "✅ Lockfile requirements.txt generated."

# Target for the main development workflow
.PHONY: develop
develop: install
	@echo "--- Starting development workflow for prompt: [$(PROMPT)] ---"
	.venv/bin/python run_commission.py --prompt "$(PROMPT)"
	@echo "--- Commission generation finished. Running audit... ---"
	make audit
	@echo "--- Development workflow complete. Consider running 'make commit_commission' ---"

# Target to run the full audit pipeline directly
# This target assumes that run_commission.py has already placed files
# in the locations expected by run_full_audit.sh (e.g., gandalf_workshop/app.py)
.PHONY: audit
audit:
	@echo "--- Running full audit pipeline ---"
	auditing/run_full_audit.sh
	@echo "✅ Audit pipeline finished."

# Target to commit the generated commission artifacts and audit receipt
.PHONY: commit_commission
commit_commission:
	@echo "--- Committing generated commission artifacts and audit receipt ---"
	# Add files copied/generated by run_commission.py for the audit
	git add gandalf_workshop/$(AUDIT_APP_NAME).py \
		gandalf_workshop/tests/test_$(AUDIT_APP_NAME).py \
		gandalf_workshop/tests/features/*.feature \
		gandalf_workshop/tests/step_definitions/*_steps.py
	git add main.py # The main.py generated by run_commission.py
	# Add __init__.py files that might have been created or ensured by run_commission.py
	git add gandalf_workshop/__init__.py \
		gandalf_workshop/tests/__init__.py \
		gandalf_workshop/tests/step_definitions/__init__.py
	# Add the audit receipt
	git add auditing/LATEST_AUDIT_RECEIPT.md
	# Add the workspace files for this commission.
	# This requires knowing the commission_id. For now, we'll add the whole workspace.
	# A more precise approach would be for run_commission.py to output the commission_id
	# to a file that this target can read.
	# For now, let's make this a broader add, or rely on user to specify.
	# The prompt for make develop was $(PROMPT). We can't directly get commission_id here easily.
	# So, for now, we commit the fixed audit files and the LATEST_AUDIT_RECEIPT.
	# The full workspace commit can be a manual step or improved later.
	# git add workspace/ # This might be too broad if multiple commissions exist
	git commit -m "feat: Implement commission for prompt: [$(PROMPT)]" \
			   -m "Generated application, tests, BDD steps, and planning artifacts.\n\nAll artifacts are stored in the workspace directory for the derived commission ID.\nFiles for auditing were copied to standard locations (gandalf_workshop/, main.py).\n\nAudit passed and LATEST_AUDIT_RECEIPT.md included."
	@echo "✅ Commission artifacts and audit receipt committed."

# Target to clean up generated files (those copied for audit)
# Does not clean the workspace/ directory by default to preserve commission history
.PHONY: clean_audit_files
clean_audit_files:
	@echo "--- Cleaning up files generated/copied for audit ---"
	rm -f gandalf_workshop/$(AUDIT_APP_NAME).py
	rm -f gandalf_workshop/tests/test_$(AUDIT_APP_NAME).py
	rm -f gandalf_workshop/tests/features/*.feature
	rm -f gandalf_workshop/tests/step_definitions/*_steps.py
	rm -f main.py
	rm -f auditing/LATEST_AUDIT_RECEIPT.md
	# Clean pycache within gandalf_workshop that might have been created
	find gandalf_workshop -type d -name "__pycache__" -exec rm -rf {} +
	rm -f .coverage
	@echo "✅ Audit file cleanup complete."

# Original clean target - might need review based on new structure
# For now, let's keep it but make it more specific if needed, or combine with clean_audit_files
.PHONY: clean
clean: clean_audit_files
	@echo "--- Performing additional cleanup (if any) ---"
	# Add any other project-wide cleanup tasks here if necessary
	# For example, if there are other dummy files created by old scaffold:
	# rm -f gandalf_workshop/tests/test_dummy.py # If this was from old scaffold
	@echo "✅ Full cleanup complete."

# Keep old scaffold files for reference or removal later if truly unused.
# mkdir -p gandalf_workshop/blueprints
# mkdir -p gandalf_workshop/artisan_guildhall/inspectors
# mkdir -p gandalf_workshop/specs
# touch gandalf_workshop/specs/data_models.py
# @echo "# Data models for Gandalf Workshop.\n\
# # Specific models for $(PROMPT) may be defined by AI agents." > gandalf_workshop/specs/data_models.py
# # These manager files are core to the framework, not feature-specific, so keep them.
# # If they don't exist, copy them. Otherwise, leave them.
# @if [ ! -f gandalf_workshop/workshop_manager.py ]; then \
# 	cp auditing/scaffold_templates/workshop_manager.template.py gandalf_workshop/workshop_manager.py; \
# fi
# @if [ ! -f gandalf_workshop/tests/test_workshop_manager.py ]; then \
# 	cp auditing/scaffold_templates/test_workshop_manager.template.py gandalf_workshop/tests/test_workshop_manager.py; \
# fi
